name: Java CI (docker)

on: [push]

env:
  AWS_REGION: eu-central-1                    # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: piggymetrics                # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true --file pom.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIASE4RYQDVRT7Q6VNN
          aws-secret-access-key: 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
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./auth-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: auth-service:${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      #- name: Fill in the new image ID in the Amazon ECS task definition
      #  id: task-def
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #    container-name: ${{ env.CONTAINER_NAME }}
      #    image: ${{ steps.build-image.outputs.image }}

      #- name: Deploy Amazon ECS task definition
      #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #  with:
      #    task-definition: ${{ steps.task-def.outputs.task-definition }}
      #    service: ${{ env.ECS_SERVICE }}
      #    cluster: ${{ env.ECS_CLUSTER }}
      #    wait-for-service-stability: true
